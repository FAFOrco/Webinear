///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MobileBrowse.Navegacion
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The NavegacionWeb recording.
    /// </summary>
    [TestModule("93cf10e5-ba10-4bce-99e6-99bd2edfbe9c", ModuleType.Recording, 1)]
    public partial class NavegacionWeb : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::MobileBrowse.MobileBrowseRepository repository.
        /// </summary>
        public static global::MobileBrowse.MobileBrowseRepository repo = global::MobileBrowse.MobileBrowseRepository.Instance;

        static NavegacionWeb instance = new NavegacionWeb();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public NavegacionWeb()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static NavegacionWeb Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Touch", "Touch item 'Dom.ServiciosDeITR' at Center", repo.Dom.ServiciosDeITRInfo, new RecordItemIndex(0));
            repo.Dom.ServiciosDeITR.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to exist. Associated repository item: 'Dom.Servicios'", repo.Dom.ServiciosInfo, new ActionTimeout(30000), new RecordItemIndex(1));
            repo.Dom.ServiciosInfo.WaitForExists(30000);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to exist. Associated repository item: 'Dom.DesignThinking'", repo.Dom.DesignThinkingInfo, new ActionTimeout(30000), new RecordItemIndex(2));
            repo.Dom.DesignThinkingInfo.WaitForExists(30000);
            
            try {
                Report.Log(ReportLevel.Info, "Touch gestures", "(Optional Action)\r\nSwipe gesture with direction 'Up (270°)' starting from 'Center' with distance '0' with swipe duration'500ms' and step count '0' on item 'Dom.DesignThinking'.", repo.Dom.DesignThinkingInfo, new RecordItemIndex(3));
                repo.Dom.DesignThinking.Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", "0"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "500ms"), 0);
                Delay.Milliseconds(500);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(3)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'Dom.DesignThinking' at Center", repo.Dom.DesignThinkingInfo, new RecordItemIndex(4));
            repo.Dom.DesignThinking.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to exist. Associated repository item: 'Dom.Testing'", repo.Dom.TestingInfo, new ActionTimeout(30000), new RecordItemIndex(5));
            repo.Dom.TestingInfo.WaitForExists(30000);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(6));
            Delay.Duration(5000, false);
            
            try {
                Report.Log(ReportLevel.Info, "Touch gestures", "(Optional Action)\r\nSwipe gesture with direction 'Up (270°)' starting from 'Center' with distance '.1' with swipe duration'500ms' and step count '0' on item 'Dom.ImgTagImgIconTestingAutomatizadoS'.", repo.Dom.ImgTagImgIconTestingAutomatizadoSInfo, new RecordItemIndex(7));
                repo.Dom.ImgTagImgIconTestingAutomatizadoS.Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", ".1"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "500ms"), 0);
                Delay.Milliseconds(500);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(7)); }
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to exist. Associated repository item: 'Dom.TestingAutomatizado'", repo.Dom.TestingAutomatizadoInfo, new ActionTimeout(30000), new RecordItemIndex(8));
            repo.Dom.TestingAutomatizadoInfo.WaitForExists(30000);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.Dom.Self, false, new RecordItemIndex(9));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
